<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.etycx.marry.modules.user.dao.IUserDao">


	<resultMap id="BaseResultMap" type="com.etycx.marry.modules.user.entity.MarryUser">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="openId" property="openId" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id, name, password, age, open_id
	</sql>

	<sql id="Social_Login_Where_Clause">
		<where>
			<trim prefixOverrides="and">
				<if test="openId != null"> and openId = #{openId}</if>
			</trim>
		</where>
	</sql>

	<select id="getUserByOpenId" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from marry_user
		<include refid="Social_Login_Where_Clause" />
	</select>

	<select id="getIUserByPhone" resultType="MarryUser">
		select id,name,phone_num phoneNum,password,sex,age,state,create_time createTime from marry_user where phone_num=#{phone}
	</select>

	<select id="count" resultType="java.lang.Integer">
		select count(1) from marry_user where open_type=#{openType} and open_id=#{openId}
	</select>



	<select id="getIUserByOpenId" resultType="MarryUser">
		select id,name,phone_num phoneNum,password,sex,age,state,create_time createTime from marry_user where open_type=#{openType} and open_id=#{openId}
	</select>

	<select id="getIUser" resultType="MarryUser">
		select id,name,phone_num phoneNum,password,sex,age,state,create_time createTime from marry_user where phone_num=#{phone}
	</select>

	<sql id="marryUserColumns">
		a.id AS "id",
		a.name AS "name",
		a.birthday AS "birthday",
		a.phone_num AS "phoneNum",
		a.password AS "password",
		a.sex AS "sex",
		a.age AS "age",
		a.state AS "state",
		a.create_time AS "createTime",
		a.head_url AS "headUrl",
		a.open_type AS "openType",
		a.open_id AS "openId",
		a.token AS "token",
		a.wedding_date AS "weddingDate"
	</sql>

	<sql id="marryUserJoins">
	</sql>

	<select id="get" resultType="MarryUser">
		SELECT
		<include refid="marryUserColumns"/>
		FROM marry_user a
		<include refid="marryUserJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="findList" resultType="MarryUser">
		SELECT
		<include refid="marryUserColumns"/>
		FROM marry_user a
		<include refid="marryUserJoins"/>
		<where>

			<if test="name != null and name != ''">
				AND a.name LIKE
				<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
				<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
				<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="MarryUser">
		SELECT
		<include refid="marryUserColumns"/>
		FROM marry_user a
		<include refid="marryUserJoins"/>
		<where>

		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		INSERT INTO marry_user(
			name,
			birthday,
			phone_num,
			password,
			sex,
			age,
			state,
			create_time,
			head_url,
			open_type,
			open_id,
			token,
			wedding_date
		) VALUES (
			#{name},
			#{birthday},
			#{phoneNum},
			#{password},
			#{sex},
			#{age},
			0,
			now(),
			#{headUrl},
			#{openType},
			#{openId},
			#{token},
			#{weddingDate}
		)
	</insert>

	<update id="update">
		UPDATE marry_user SET
		<if test="name != null and name != ''">
			name = #{name},
		</if>
		<if test="birthday != null and birthday != ''">
			birthday = #{birthday},
		</if>
		<if test="phoneNum != null and phoneNum != ''">
			phone_num = #{phoneNum},
		</if>
		<if test="password != null and password != ''">
			password = #{password},
		</if>
		<if test="sex != null and sex != ''">
			sex = #{sex},
		</if>
		<if test="age != null and age != ''">
			age = #{age},
		</if>
		<if test="state != null and state != ''">
			state = #{state},
		</if>
		<if test="headUrl != null and headUrl != ''">
			head_url = #{headUrl},
		</if>
		<if test="openIdType != null and openIdType != ''">
			open_type = #{openIdType},
		</if>
		<if test="openId != null and openId != ''">
			open_id = #{openId},
		</if>
		<if test="token != null and token != ''">
			token = #{token},
		</if>
		<if test="weddingDate != null and weddingDate != ''">
			wedding_date = #{weddingDate}
		</if>
		WHERE id = #{id}
	</update>
	<update id="updateUser">
		UPDATE marry_user
		<set>
			head_url = #{headUrl},
			name = #{name},
			sex = #{sex},

		<if test="birthday != null and birthday != ''">
			birthday = #{birthday},
		</if>
		<if test="weddingDate != null and weddingDate != ''">
			wedding_date = #{weddingDate}
		</if>
	</set>
		WHERE id = #{id}
	</update>
	<update id="delete">
		DELETE FROM marry_user
		WHERE id = #{id}
	</update>
	<update id="updatePhone">
		UPDATE marry_user SET
		<if test="phoneNum != null and phoneNum != ''">
			phone_num = #{phoneNum}
		</if>
		WHERE id = #{id}
	</update>
	<update id="updatePassword">
		UPDATE marry_user SET
		<if test="password != null and password != ''">
			password = #{password}
		</if>
		WHERE id = #{id}
	</update>
</mapper>

